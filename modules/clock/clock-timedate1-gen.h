/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __CLOCK_TIMEDATE1_GEN_H__
#define __CLOCK_TIMEDATE1_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.timedate1 */

#define CLOCK_TYPE_TIMEDATE1_GEN (clock_timedate1_gen_get_type ())
#define CLOCK_TIMEDATE1_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CLOCK_TYPE_TIMEDATE1_GEN, ClockTimedate1Gen))
#define CLOCK_IS_TIMEDATE1_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CLOCK_TYPE_TIMEDATE1_GEN))
#define CLOCK_TIMEDATE1_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), CLOCK_TYPE_TIMEDATE1_GEN, ClockTimedate1GenIface))

struct _ClockTimedate1Gen;
typedef struct _ClockTimedate1Gen ClockTimedate1Gen;
typedef struct _ClockTimedate1GenIface ClockTimedate1GenIface;

struct _ClockTimedate1GenIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_set_timezone) (
    ClockTimedate1Gen *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_timezone,
    gboolean arg_user_interaction);

};

GType clock_timedate1_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *clock_timedate1_gen_interface_info (void);
guint clock_timedate1_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void clock_timedate1_gen_complete_set_timezone (
    ClockTimedate1Gen *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void clock_timedate1_gen_call_set_timezone (
    ClockTimedate1Gen *proxy,
    const gchar *arg_timezone,
    gboolean arg_user_interaction,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean clock_timedate1_gen_call_set_timezone_finish (
    ClockTimedate1Gen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean clock_timedate1_gen_call_set_timezone_sync (
    ClockTimedate1Gen *proxy,
    const gchar *arg_timezone,
    gboolean arg_user_interaction,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define CLOCK_TYPE_TIMEDATE1_GEN_PROXY (clock_timedate1_gen_proxy_get_type ())
#define CLOCK_TIMEDATE1_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CLOCK_TYPE_TIMEDATE1_GEN_PROXY, ClockTimedate1GenProxy))
#define CLOCK_TIMEDATE1_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CLOCK_TYPE_TIMEDATE1_GEN_PROXY, ClockTimedate1GenProxyClass))
#define CLOCK_TIMEDATE1_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CLOCK_TYPE_TIMEDATE1_GEN_PROXY, ClockTimedate1GenProxyClass))
#define CLOCK_IS_TIMEDATE1_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CLOCK_TYPE_TIMEDATE1_GEN_PROXY))
#define CLOCK_IS_TIMEDATE1_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CLOCK_TYPE_TIMEDATE1_GEN_PROXY))

typedef struct _ClockTimedate1GenProxy ClockTimedate1GenProxy;
typedef struct _ClockTimedate1GenProxyClass ClockTimedate1GenProxyClass;
typedef struct _ClockTimedate1GenProxyPrivate ClockTimedate1GenProxyPrivate;

struct _ClockTimedate1GenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ClockTimedate1GenProxyPrivate *priv;
};

struct _ClockTimedate1GenProxyClass
{
  GDBusProxyClass parent_class;
};

GType clock_timedate1_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ClockTimedate1GenProxy, g_object_unref)
#endif

void clock_timedate1_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ClockTimedate1Gen *clock_timedate1_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ClockTimedate1Gen *clock_timedate1_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void clock_timedate1_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ClockTimedate1Gen *clock_timedate1_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ClockTimedate1Gen *clock_timedate1_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define CLOCK_TYPE_TIMEDATE1_GEN_SKELETON (clock_timedate1_gen_skeleton_get_type ())
#define CLOCK_TIMEDATE1_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CLOCK_TYPE_TIMEDATE1_GEN_SKELETON, ClockTimedate1GenSkeleton))
#define CLOCK_TIMEDATE1_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CLOCK_TYPE_TIMEDATE1_GEN_SKELETON, ClockTimedate1GenSkeletonClass))
#define CLOCK_TIMEDATE1_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CLOCK_TYPE_TIMEDATE1_GEN_SKELETON, ClockTimedate1GenSkeletonClass))
#define CLOCK_IS_TIMEDATE1_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CLOCK_TYPE_TIMEDATE1_GEN_SKELETON))
#define CLOCK_IS_TIMEDATE1_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CLOCK_TYPE_TIMEDATE1_GEN_SKELETON))

typedef struct _ClockTimedate1GenSkeleton ClockTimedate1GenSkeleton;
typedef struct _ClockTimedate1GenSkeletonClass ClockTimedate1GenSkeletonClass;
typedef struct _ClockTimedate1GenSkeletonPrivate ClockTimedate1GenSkeletonPrivate;

struct _ClockTimedate1GenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ClockTimedate1GenSkeletonPrivate *priv;
};

struct _ClockTimedate1GenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType clock_timedate1_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ClockTimedate1GenSkeleton, g_object_unref)
#endif

ClockTimedate1Gen *clock_timedate1_gen_skeleton_new (void);


G_END_DECLS

#endif /* __CLOCK_TIMEDATE1_GEN_H__ */
